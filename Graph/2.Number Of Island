/*
https://leetcode.com/problems/number-of-islands/



*/

class Solution {

    public static int x[] = new int[] { -1, 1, 0, 0 };
    public static int y[] = new int[] { 0, 0, 1, -1 };

    public static boolean checkBoundary(int i, int j, char[][] grid) {
        if ((i >= 0 && i < grid.length) && (j >= 0 && j < grid[0].length)) {
            return true;
        }
        return false;
    }

    public static void dfs(int i, int j, char[][] grid, boolean visited[][]) {
        for (int k = 0; k < 4; k++) {
            if (checkBoundary(i + x[k], j + y[k], grid)) {
                if (grid[i + x[k]][j + y[k]] == '1' && !visited[i + x[k]][j + y[k]]) {
                    visited[i + x[k]][j + y[k]] = true;
                    dfs(i + x[k], j + y[k], grid, visited);
                }
            }

        }
    }

    public int numIslands(char[][] grid) {
        boolean visited[][] = new boolean[300][300];
        int island = 0;

        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[i].length; j++) {
                if (!visited[i][j] && grid[i][j] == '1') {
                    visited[i][j] = true;
                    dfs(i, j, grid, visited);
                    island++;
                }
            }
        }
        return island;

    }
}
