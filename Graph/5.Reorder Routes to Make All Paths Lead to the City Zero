/*

https://leetcode.com/problems/reorder-routes-to-make-all-paths-lead-to-the-city-zero/description/

*/

class Edge {
    int v;
    boolean path;

    Edge(int v, boolean path) {
        this.v = v;
        this.path = path;
    }
}

class Solution {

    boolean visited[];
    ArrayList<ArrayList<Edge>> adj;
    int res = 0;

    void dfs(int u) {
        visited[u] = true;

        for (int i = 0; i < adj.get(u).size(); i++) {
            if (!visited[adj.get(u).get(i).v]) {
                if (adj.get(u).get(i).path) {
                    System.out.println(u + " " + adj.get(u).get(i).v);
                    res++;
                }
                dfs(adj.get(u).get(i).v);
            }
        }
    }

    public int minReorder(int n, int[][] connections) {

        visited = new boolean[n];
        adj = new ArrayList<ArrayList<Edge>>();

        for (int i = 0; i < n; i++) {
            adj.add(new ArrayList<Edge>());
        }

        for (int i = 0; i < connections.length; i++) {
            int u = connections[i][0];
            int v = connections[i][1];

            adj.get(u).add(new Edge(v, true));
            adj.get(v).add(new Edge(u, false));
        }

        dfs(0);

        return res;

    }
}
