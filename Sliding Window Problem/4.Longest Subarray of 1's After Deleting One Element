/*

https://leetcode.com/problems/longest-subarray-of-1s-after-deleting-one-element/

*/

O(n)

class Solution {
    public int longestSubarray(int[] nums) {

        int left[] = new int[nums.length];
        int right[] = new int[nums.length];
        int ones = 0,res=0,temp=0;

        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 0) {
                ones = 0;
            } else {
                ones++;
                left[i] = ones;
            }
        }
        ones = 0;
        for (int i = nums.length - 1; i >= 0; i--) {
            if (nums[i] == 0) {
                ones = 0;
            } else {
                ones++;
                right[i] = ones;
            }
        }

        if (right[0] == right.length) // if no zero present
        {
            return right[0] - 1; //mandatory to delete one element
        }

        for (int i = 0; i < left.length; i++) {
            temp = 0;

            if (left[i] == 0) {
                if (i - 1 >= 0 && left[i - 1] > 0) {
                    temp += left[i - 1];
                }
                if (i + 1 < left.length && right[i + 1] > 0) {
                    temp += right[i + 1];
                }
                res = Math.max(temp, res);
            }
        }
        return res;
    }
}


----------------------------------


Dynamic Sliding Window

class Solution {
    public int longestSubarray(int[] nums) {

        int i=0;
        int zeros=0;
        int res=0;

        for(int j=0;j<nums.length;j++)
        {
            if(nums[j]==0)
            {
                zeros++;
            }

            while(zeros>1)
            {
                if(nums[i]==0)
                {
                    zeros--;
                }
                i++;
                
            }
            res=Math.max(res,j-i);
        }
        return res;
    }
}



