/*

https://leetcode.com/problems/path-sum-ii/

*/

class Solution {

    List<List<Integer>> res;

    void dfs(TreeNode root, int targetSum, List<Integer> currentPath) {
        if (root == null) return;

        currentPath.add(root.val);

        if (root.left == null && root.right == null && (targetSum - root.val) == 0) {
            res.add(new ArrayList<>(currentPath)); //deep copy
        }

        dfs(root.left, targetSum - root.val, currentPath);
        dfs(root.right, targetSum - root.val, currentPath);

        currentPath.remove(currentPath.size() - 1);
    }

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {

        res = new ArrayList<>();

        dfs(root, targetSum, new ArrayList<Integer>());

        return res;

    }
}
