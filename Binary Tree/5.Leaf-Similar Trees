/*

https://leetcode.com/problems/leaf-similar-trees/description/

*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {

    void bfs(TreeNode root, List<Integer> list) {
        if (root == null) {
            return;
        } else if (root.left == null && root.right == null) {
            list.add(root.val);
            return;
        }

        bfs(root.left, list);
        bfs(root.right, list);
    }

    public boolean leafSimilar(TreeNode root1, TreeNode root2) {
        List<Integer> list1 = new ArrayList<Integer>();
        List<Integer> list2 = new ArrayList<Integer>();

        bfs(root1, list1);
        bfs(root2, list2);

        if (list1.size() != list2.size()) {
            return false;
        }

        for (int i = 0; i < list1.size(); i++) {
            if ((int) list1.get(i) != (int) list2.get(i)) {
                return false;
            }
        }
        return true;
    }
}
